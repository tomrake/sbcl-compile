* sbcl-compile


** Using sbcl-compile

*** Process Diagram

#+begin_src dot :file phases.png
  digraph phases {
    ranksep=1.0; size = "32.0,32,0"
    {
   
      node [shape = box; fontsize = 32];
    /* The phase of compilation */
      Start -> Configure -> Compile -> Test -> Install -> Finish;
     
    
      node [shape = plaintext; fontsize=24]	
      {rank = same; Configure; "Edit bin/configure.sh";}
      {rank = same; Compile; "bin/do-release-compile.sh"; "bin/do-git-compile.sh";}
      {rank = same; Test; "bin/run-tests.sh"; "bin/run-ansi-tests.sh";"Custom Testing";}
      {rank = same; Install; "bin/do-install";}
      
    }
  }
#+end_src

*** TLDR :)

- Have a msys2 ucrt64 environment
- Have all the necessary ucrt64 packages
- Clone the repo
- Enter the cloned repo
- Edit bin/configuration.sh to your liking
- sh bin/do-compile.sh



*** The wordy instructions

Once you  have a working msys2 ucrt64 environment with all the necessary packages installed you need to use git and clone sbcl-compile.
The sbcl-compile bin/configuration.sh file is intended to be modified to change the compilation source and installation location along with SBCL build options.
On February 13, 2024 this usually means changing the variable RELEASE_VERSION to the SBCL version you wish to compile.
Now change the BUILD_NAME to something that makes sense to you.
Change the COMPILE_BUILD_OPTIONS to your liking.
Make the INSTALL_LOCATION to a directory where you to install the compiled version.

Next in the msys2 ucrt64 bash shell cd to the sbcl-compile directory and
enter the sh bin/do-release-compile.sh. sbcl-compile will create working directories, download SBCL source, getting the last official SBCL windows released compiler.
And build and test a new SBCL lisp system.


** MSYS2 installation

I believe the details of msys2 installation are a separate topic, (see [[https://www.msys2.org/wiki/MSYS2-installation/]]).
The various msys2 environments allow compilation with various compilers gcc and clang under various versions of Microsoft libraries, ( see https://www.msys2.org/docs/environments/ )


** Project Origin


The expression of msys2 code compilation in executable code with comments follows.

My recipe for compiling SBCL source on Windows 11 using msys2 in the ucrt64 environment.
Much is owed to Paul Silisteanu's August 20, 2019 blog post https://solarianprogrammer.com/2019/08/20/building-sbcl-steel-bank-common-lisp-windows/,
after following the instructions I wrote a bash script to accomplish the entire task.




* The Design Iterations
The first design was a simple download, compile, test, and install process that I hand-edited.

In the second design release verification was added.
The release source/git source switch was a hack.
The configuration had too many items.

The third iteration ended up modularizing code to perform the basic compile, test, and install.
The details about keys and signing of releases have been moved into a module.
Configuration has been streamlined to source, destination, and compiler build options.
The do-* commands  do the various configured tasks by a sequence of sourced modules.


** Still to be done

*** Git source compile
The do-compile-git.sh command needs to be coded.
The git configuration items need to be specified in bin/configuration.sh.
*** Alternate XC_HOST compiler
Allow a configuration.sh to specify another lisp for the compilation of SBCL.
*** Separate config, commands, and modules
At the end of the third iteration, it seems I have divided the code into commands in bin and the modules that compose those commands.
A fourth design iteration should separate the configuration, commands, and modules.
*** MSYS2 Requirements
#+begin_src sh
## TODO Prescribe the code for the actual loading of msys2 packages needed by these scripts.
#+end_src
*** MSYS2 Possibilities

I have not fully explored compilation in the various msys2 environments but have focused on ucrt64.

